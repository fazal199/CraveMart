/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/70uA1ylW4hZ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'
import { Rethink_Sans } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

rethink_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { Slider } from "@/components/ui/slider"
import { Button } from "@/components/ui/button"

export function Component() {
  const [filters, setFilters] = useState({
    category: [],
    price: [0, 100],
  })
  const products = [
    {
      id: 1,
      name: "Cozy Sweater",
      price: 49.99,
      image: "/placeholder.svg",
    },
    {
      id: 2,
      name: "Leather Backpack",
      price: 79.99,
      image: "/placeholder.svg",
    },
    {
      id: 3,
      name: "Stylish Sunglasses",
      price: 29.99,
      image: "/placeholder.svg",
    },
    {
      id: 4,
      name: "Comfortable Sneakers",
      price: 59.99,
      image: "/placeholder.svg",
    },
    {
      id: 5,
      name: "Elegant Dress",
      price: 89.99,
      image: "/placeholder.svg",
    },
    {
      id: 6,
      name: "Durable Suitcase",
      price: 99.99,
      image: "/placeholder.svg",
    },
    {
      id: 7,
      name: "Chic Scarf",
      price: 24.99,
      image: "/placeholder.svg",
    },
    {
      id: 8,
      name: "Sleek Wallet",
      price: 39.99,
      image: "/placeholder.svg",
    },
  ]
  const filteredProducts = useMemo(() => {
    return products.filter((product) => {
      return (
        (filters.category.length === 0 || filters.category.includes(product.category)) &&
        product.price >= filters.price[0] &&
        product.price <= filters.price[1]
      )
    })
  }, [filters, products])
  const handleCategoryChange = (category) => {
    setFilters((prevFilters) => ({
      ...prevFilters,
      category: prevFilters.category.includes(category)
        ? prevFilters.category.filter((c) => c !== category)
        : [...prevFilters.category, category],
    }))
  }
  const handlePriceChange = (price) => {
    setFilters((prevFilters) => ({
      ...prevFilters,
      price,
    }))
  }
  return (
    <div className="grid grid-cols-1 md:grid-cols-[300px_1fr] gap-8 p-6">
      <div className="bg-background rounded-lg shadow-lg p-6">
        <h2 className="text-lg font-bold mb-4">Filters</h2>
        <div className="grid gap-4">
          <div>
            <h3 className="text-base font-semibold mb-2">Category</h3>
            <div className="grid gap-2">
              <Label className="flex items-center gap-2">
                <Checkbox
                  checked={filters.category.includes("clothing")}
                  onCheckedChange={() => handleCategoryChange("clothing")}
                />
                Clothing
              </Label>
              <Label className="flex items-center gap-2">
                <Checkbox
                  checked={filters.category.includes("accessories")}
                  onCheckedChange={() => handleCategoryChange("accessories")}
                />
                Accessories
              </Label>
              <Label className="flex items-center gap-2">
                <Checkbox
                  checked={filters.category.includes("bags")}
                  onCheckedChange={() => handleCategoryChange("bags")}
                />
                Bags
              </Label>
            </div>
          </div>
          <div>
            <h3 className="text-base font-semibold mb-2">Price</h3>
            <Slider
              value={[filters.price]}
              onValueChange={handlePriceChange}
              min={0}
              max={100}
              step={1}
              className="w-full"
            />
            <div className="flex justify-between text-sm text-muted-foreground">
              <span>${filters.price[0]}</span>
              <span>${filters.price[1]}</span>
            </div>
          </div>
        </div>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {filteredProducts.map((product) => (
          <div key={product.id} className="bg-background rounded-lg shadow-lg overflow-hidden">
            <img
              src="/placeholder.svg"
              alt={product.name}
              width={300}
              height={300}
              className="w-full h-64 object-cover"
            />
            <div className="p-4">
              <h3 className="text-base font-semibold">{product.name}</h3>
              <p className="text-muted-foreground">${product.price}</p>
              <Button variant="outline" className="mt-4 w-full">
                Add to Cart
              </Button>
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}
